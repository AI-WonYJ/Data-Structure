과제 2. 힙을 사용해 LFU 시뮬레이터 구현하기

https://docs.google.com/document/d/1Cny-68Tbcji996zVh7PqBR4Ga6WFiaUL4T0P9QJnLFM/edit


과제 2. 
Heap 을 사용한 LFU 시뮬레이터 구현하기 


개요 
LFU(Least Frequently Used) 알고리즘은 컴퓨터 응용의 메모리 접근이 통상 Skewness 를  갖는다는 특성을 이용해 캐쉬 히트율(cache hit ratio)를 높이기 위해 사용되는 대표적인 교체 정책 (Replacement Policy)이다. LFU 알고리즘은 캐쉬에 새로운 공간을 확보해야 할 때, 현재 캐쉬에 있는 페이지 중 (프로그램이 시작된 이후의 모든) 과거 접근 횟수가 가장 적은 데이터를 쫓아내는 알고리즘이다. 본 과제에서는 직접 구현한 Heap 을 이용해 LFU 시뮬레이터를 만들고, Facebook 의 그래프 접근 워크로드로 테스트 해본다. 

LFU 시뮬레이터 
실제 저장장치를 접근하는 워크로드를 입력으로 받아 캐쉬 크기를 변화시키며 LFU 알고리즘 적용 시 캐쉬 히트율을 측정하는 시뮬레이터를 만든다. 




요구사항 
아래의 코드 템플릿을 확장하여 LFU 시뮬레이터를 완성한다 (Heap 클래스를 구현하여 사용할 것) . 
https://github.com/eunjicious/ds_2023.git

캐쉬 크기를 100 에서 1000까지 변화시키면서 linkbench.trc 워크로드를 주입한 실행결과를 출력한다 (현재 결과의 숫자는 임의의 숫자임!) . 


cache_slot =  100 cache_hit =  442240 hit ratio =  0.16915674079514073
cache_slot = 200 …



제출방법 
제출기한: 5/16화) 23:59 까지 (지연제출 허용하지 않음. 코로나 확진 경우도 미허용. 기간 충분함.) 
제출물: 보고서 (소스코드, 요구사항 각각에 대한 결과물 캡처, 설명, 필요한 내용을 작성하여 제출) 
** 결과는 공개안함. 본인이 스스로 검증할 것. 
** 결과가 학생들마다 편차가 커서 정답으로 볼 수 있는 결과를 아래와 같이 공개함. 
** 소수점 두자리 아래까지 같을 필요 없으며, 트렌드가 거의 유사하면 감점하지 않음. 

     5. 실험결과




6. 피드백 
MinHeap 이 정확히 동작하는지 검증 
class 로 lpn 과 frequency 를 함께 유지하는 구조체를 만들어 사용하면 편리. 
파이썬에서 지원하는 “연산자 오버로딩”을 참고하면 쉽게 구현 가능 
buildHeap 은 사용할 필요가 없음 (이것 사용 시 시간복잡도가 크게 증가하므로 감점 대상이 될 수 있음) 
Frequency 는 프로그램 시작부터 종료까지 모두 유지해야 함 (cache 적재와 무관하게) 
pdf 파일로 제출하지 않을 경우 감점 대상임 








def lfu_sim(cache_slots):
  cache_hit = 0
  tot_cnt = 0

  data_file = open("linkbench.trc")


  for line in data_file.readlines():
    lpn = line.split()[0]

    # Program here 

    #print("cache_slot = ", cache_slots, "cache_hit = ", cache_hit, "hit ratio = ", cache_hit / tot_cnt)

if __name__ == "__main__":
  for cache_slots in range(100, 1000, 100):
    lfu_sim(cache_slots)